$date
	Thu Apr 16 11:33:51 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Adder4bit_tb $end
$var wire 4 ! Sum [3:0] $end
$var wire 1 " Cout $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 1 % Cin $end
$scope module uut $end
$var wire 4 & A [3:0] $end
$var wire 4 ' B [3:0] $end
$var wire 1 % Cin $end
$var wire 4 ( transferC [3:0] $end
$var wire 4 ) exOrB [3:0] $end
$var wire 4 * Sum [3:0] $end
$var wire 1 " Cout $end
$scope module FA1 $end
$var wire 1 + Cin $end
$var wire 1 , Cout $end
$var wire 1 - In1 $end
$var wire 1 . In2 $end
$var wire 1 / Sum $end
$upscope $end
$scope module FA2 $end
$var wire 1 0 Cin $end
$var wire 1 1 Cout $end
$var wire 1 2 In1 $end
$var wire 1 3 In2 $end
$var wire 1 4 Sum $end
$upscope $end
$scope module FA3 $end
$var wire 1 5 Cin $end
$var wire 1 6 Cout $end
$var wire 1 7 In1 $end
$var wire 1 8 In2 $end
$var wire 1 9 Sum $end
$upscope $end
$scope module FA4 $end
$var wire 1 % Cin $end
$var wire 1 : Cout $end
$var wire 1 ; In1 $end
$var wire 1 < In2 $end
$var wire 1 = Sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
b0 *
b0 )
b0 (
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#20
1"
1+
10
15
1,
11
16
b1111 (
1:
1.
13
18
1<
1/
14
19
b1110 !
b1110 *
0=
b1111 )
1-
12
17
1;
b1111 $
b1111 '
b1111 #
b1111 &
#40
0"
0+
00
05
0,
01
06
b0 (
0:
0/
04
09
0.
03
08
0<
b0 )
b1 !
b1 *
1=
0-
02
07
0;
1%
b0 #
b0 &
#60
1/
19
14
1.
18
1<
b1011 )
b1111 !
b1111 *
1=
12
0%
b1011 $
b1011 '
b100 #
b100 &
#80
1+
11
04
10
1/
16
15
19
0.
b111 (
1:
b11 )
b1011 !
b1011 *
1=
17
1;
1%
b1100 $
b1100 '
b111 #
b111 &
#100
